name: SubForge Dashboard Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration, performance, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r subforge-dashboard/backend/requirements.txt
        pip install pytest-xdist pytest-cov pytest-mock

    - name: Set up test environment
      run: |
        export TESTING=true
        export DATABASE_URL=postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key-for-ci

    - name: Run database migrations
      run: |
        cd subforge-dashboard/backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb

    - name: Run backend tests
      run: |
        cd subforge-dashboard/tests
        pytest backend/${{ matrix.test-type }}/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit-${{ matrix.test-type }}.xml \
          -v
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        TESTING: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./subforge-dashboard/tests/coverage.xml
        flags: backend-${{ matrix.test-type }}
        name: backend-${{ matrix.test-type }}-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results-${{ matrix.test-type }}
        path: |
          subforge-dashboard/tests/junit-${{ matrix.test-type }}.xml
          subforge-dashboard/tests/htmlcov/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-type: [unit, integration]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: subforge-dashboard/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd subforge-dashboard/frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd subforge-dashboard/frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd subforge-dashboard/tests/frontend
        npm test -- \
          --coverage \
          --testPathPattern=${{ matrix.test-type }} \
          --watchAll=false \
          --passWithNoTests
      env:
        CI: true
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./subforge-dashboard/tests/frontend/coverage/lcov.info
        flags: frontend-${{ matrix.test-type }}
        name: frontend-${{ matrix.test-type }}-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results-${{ matrix.test-type }}
        path: |
          subforge-dashboard/tests/frontend/coverage/
          subforge-dashboard/tests/frontend/jest-results.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser  
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: subforge-dashboard/frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r subforge-dashboard/backend/requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd subforge-dashboard/frontend
        npm ci

    - name: Start backend server
      run: |
        cd subforge-dashboard/backend
        python run.py &
        echo $! > backend.pid
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        TESTING: true

    - name: Start frontend server  
      run: |
        cd subforge-dashboard/frontend
        npm run dev &
        echo $! > frontend.pid
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Wait for servers
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/system/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 1; done'

    - name: Run integration tests
      run: |
        cd subforge-dashboard/tests
        pytest integration/ \
          --junitxml=junit-integration.xml \
          -v
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        FRONTEND_URL: http://localhost:3001
        BACKEND_URL: http://localhost:8000

    - name: Cleanup servers
      if: always()
      run: |
        [[ -f subforge-dashboard/backend/backend.pid ]] && kill $(cat subforge-dashboard/backend/backend.pid) || true
        [[ -f subforge-dashboard/frontend/frontend.pid ]] && kill $(cat subforge-dashboard/frontend/frontend.pid) || true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: subforge-dashboard/tests/junit-integration.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r subforge-dashboard/backend/requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd subforge-dashboard/frontend
        npm ci
        cd ../tests/e2e
        npm ci

    - name: Install Playwright browsers
      run: |
        cd subforge-dashboard/tests/e2e
        npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start backend server
      run: |
        cd subforge-dashboard/backend
        python run.py &
        echo $! > backend.pid
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
        TESTING: true

    - name: Start frontend server
      run: |
        cd subforge-dashboard/frontend
        npm run build
        npm start &
        echo $! > frontend.pid
      env:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Wait for servers
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/system/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 1; done'

    - name: Run E2E tests
      run: |
        cd subforge-dashboard/tests/e2e
        npx playwright test --project=${{ matrix.browser }} --reporter=html
      env:
        BASE_URL: http://localhost:3001

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: subforge-dashboard/tests/e2e/playwright-report/
        retention-days: 7

    - name: Cleanup servers
      if: always()
      run: |
        [[ -f subforge-dashboard/backend/backend.pid ]] && kill $(cat subforge-dashboard/backend/backend.pid) || true
        [[ -f subforge-dashboard/frontend/frontend.pid ]] && kill $(cat subforge-dashboard/frontend/frontend.pid) || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in */junit-*.xml; do
          if [[ -f "$result_file" ]]; then
            echo "- ✅ $(basename ${result_file%.xml})" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### E2E Test Reports" >> $GITHUB_STEP_SUMMARY
        for report_dir in playwright-report-*; do
          if [[ -d "$report_dir" ]]; then
            browser=$(echo $report_dir | sed 's/playwright-report-//')
            echo "- 🎭 $browser: Playwright report available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: Check test results
      run: |
        # This step will fail if any of the previous jobs failed
        # ensuring the overall workflow status reflects test failures
        if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
          echo "❌ Backend tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
          echo "❌ Frontend tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "❌ E2E tests failed"
          exit 1
        fi
        
        echo "✅ All tests passed!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r subforge-dashboard/backend/ -f json -o bandit-report.json || true

    - name: Run npm audit
      run: |
        cd subforge-dashboard/frontend
        npm audit --audit-level=moderate || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json