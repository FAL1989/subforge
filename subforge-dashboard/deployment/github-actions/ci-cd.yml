name: SubForge Dashboard CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Static Analysis and Security Checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/setup@master
    - run: snyk test --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd subforge-dashboard/backend
        pip install -r requirements.txt
        pip install pytest-cov coverage

    - name: Run database migrations
      run: |
        cd subforge-dashboard/backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run backend tests
      run: |
        cd subforge-dashboard/backend
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./subforge-dashboard/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: subforge-dashboard/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd subforge-dashboard/frontend
        npm ci

    - name: Run ESLint
      run: |
        cd subforge-dashboard/frontend
        npm run lint

    - name: Run type checking
      run: |
        cd subforge-dashboard/frontend
        npx tsc --noEmit

    - name: Run unit tests
      run: |
        cd subforge-dashboard/frontend
        npm run test:coverage

    - name: Run E2E tests
      run: |
        cd subforge-dashboard/frontend
        npx playwright install --with-deps
        npm run test:e2e
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: subforge-dashboard/frontend/playwright-report/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./subforge-dashboard/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build Docker Images
  build:
    needs: [security-scan, backend-test, frontend-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      id: backend-build
      uses: docker/build-push-action@v5
      with:
        context: ./subforge-dashboard
        file: ./subforge-dashboard/deployment/docker/backend.Dockerfile
        target: production
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      id: frontend-build
      uses: docker/build-push-action@v5
      with:
        context: ./subforge-dashboard
        file: ./subforge-dashboard/deployment/docker/frontend.Dockerfile
        target: production
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL || 'https://api.subforge.yourdomain.com' }}
          NEXT_PUBLIC_WS_URL=${{ vars.NEXT_PUBLIC_WS_URL || 'wss://api.subforge.yourdomain.com' }}

    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.backend-meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.frontend-meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-frontend.sarif'

  # Deploy to Staging
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.subforge.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        cd subforge-dashboard/deployment/kubernetes
        
        # Update image tags
        sed -i "s|image: subforge/backend:latest|image: ${{ needs.build.outputs.backend-image }}|g" backend.yaml
        sed -i "s|image: subforge/frontend:latest|image: ${{ needs.build.outputs.frontend-image }}|g" frontend.yaml
        
        # Apply staging namespace and configurations
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml -n subforge-staging
        kubectl apply -f secrets.yaml -n subforge-staging
        
        # Deploy services
        kubectl apply -f postgres.yaml -n subforge-staging
        kubectl apply -f redis.yaml -n subforge-staging
        kubectl apply -f backend.yaml -n subforge-staging
        kubectl apply -f frontend.yaml -n subforge-staging
        kubectl apply -f ingress.yaml -n subforge-staging
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n subforge-staging --timeout=300s
        kubectl rollout status deployment/frontend -n subforge-staging --timeout=300s

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=backend -n subforge-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=frontend -n subforge-staging --timeout=300s

  # Deploy to Production
  deploy-production:
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://subforge.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        cd subforge-dashboard/deployment/kubernetes
        
        # Update image tags
        sed -i "s|image: subforge/backend:latest|image: ${{ needs.build.outputs.backend-image }}|g" backend.yaml
        sed -i "s|image: subforge/frontend:latest|image: ${{ needs.build.outputs.frontend-image }}|g" frontend.yaml
        
        # Apply production configurations
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml -n subforge
        kubectl apply -f secrets.yaml -n subforge
        
        # Deploy services with rolling update
        kubectl apply -f postgres.yaml -n subforge
        kubectl apply -f redis.yaml -n subforge
        kubectl apply -f backend.yaml -n subforge
        kubectl apply -f frontend.yaml -n subforge
        kubectl apply -f ingress.yaml -n subforge
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n subforge --timeout=600s
        kubectl rollout status deployment/frontend -n subforge --timeout=600s

    - name: Run production health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=backend -n subforge --timeout=300s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=frontend -n subforge --timeout=300s
        
        # Test endpoints
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -n subforge -- \
          curl -f http://backend-service:8000/health
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -n subforge -- \
          curl -f http://frontend-service:3001/api/health

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'Production deployment successful! :rocket:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: 'Production deployment failed! :x:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database Migration Job
  migrate-database:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    needs: [deploy-production]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Run database migrations
      run: |
        export KUBECONFIG=kubeconfig
        kubectl create job --from=deployment/backend db-migrate-$(date +%s) -n subforge
        kubectl wait --for=condition=complete job/db-migrate-$(date +%s) -n subforge --timeout=300s