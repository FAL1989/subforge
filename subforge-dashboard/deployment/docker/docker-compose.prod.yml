version: '3.8'

services:
  # PostgreSQL Database with Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: subforge-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-subforge}
      POSTGRES_USER: ${POSTGRES_USER:-subforge}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db-prod.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - /etc/localtime:/etc/localtime:ro
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_statement=mod
      -c log_temp_files=0
      -c checkpoint_completion_target=0.9
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-subforge} -d ${POSTGRES_DB:-subforge}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    restart: unless-stopped
    networks:
      - subforge-prod
    security_opt:
      - no-new-privileges:true

  # Redis Cache with Production Configuration
  redis:
    image: redis:7-alpine
    container_name: subforge-redis-prod
    command: |
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_prod_data:/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - subforge-prod
    security_opt:
      - no-new-privileges:true

  # FastAPI Backend Production
  backend:
    build:
      context: ../..
      dockerfile: deployment/docker/backend.Dockerfile
      target: production
    image: subforge/backend:${VERSION:-latest}
    container_name: subforge-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-subforge}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-subforge}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://subforge.yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKERS=${BACKEND_WORKERS:-4}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - backend_logs_prod:/app/logs
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - subforge-prod
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Next.js Frontend Production
  frontend:
    build:
      context: ../..
      dockerfile: deployment/docker/frontend.Dockerfile
      target: production
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.subforge.yourdomain.com}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-wss://api.subforge.yourdomain.com}
        - NEXT_PUBLIC_ENVIRONMENT=production
    image: subforge/frontend:${VERSION:-latest}
    container_name: subforge-frontend-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
    ports:
      - "127.0.0.1:3001:3001"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - subforge-prod
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    restart: unless-stopped

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: subforge-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /etc/localtime:/etc/localtime:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - subforge-prod
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: subforge-fluentd-prod
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - backend_logs_prod:/app/logs:ro
      - nginx_logs_prod:/var/log/nginx:ro
    depends_on:
      - backend
      - nginx
    networks:
      - subforge-prod
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/subforge/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/subforge/data/redis
  backend_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  subforge-prod:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 172.21.0.0/16