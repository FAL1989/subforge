#!/usr/bin/env python3
"""
Base Strategy Interface for PRP Generation
Defines the contract for all PRP generation strategies
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional

from ..context_engineer import ContextPackage
from ..project_analyzer import ProjectProfile


class PRPType(Enum):
    """Different types of Product Requirements Prompts"""
    FACTORY_ANALYSIS = "factory_analysis"
    FACTORY_GENERATION = "factory_generation"
    AGENT_SPECIALIZATION = "agent_specialization"
    WORKFLOW_OPTIMIZATION = "workflow_optimization"
    VALIDATION_COMPREHENSIVE = "validation_comprehensive"


@dataclass
class PRP:
    """Product Requirements Prompt - Comprehensive context for AI execution"""
    id: str
    type: PRPType
    title: str
    context_package: ContextPackage
    execution_prompt: str
    validation_checklist: List[str]
    success_metrics: List[str]
    output_specification: Dict[str, Any]
    created_at: datetime

    def to_markdown(self) -> str:
        """Convert PRP to structured markdown format"""
        from .utils import format_checklist, format_metrics, format_output_spec
        
        return f"""# PRP: {self.title}

**ID**: `{self.id}`  
**Type**: {self.type.value}  
**Created**: {self.created_at.strftime('%Y-%m-%d %H:%M:%S')}

## Context Package
{self.context_package.to_markdown()}

## Execution Prompt

{self.execution_prompt}

## Validation Checklist

{format_checklist(self.validation_checklist)}

## Success Metrics

{format_metrics(self.success_metrics)}

## Output Specification

{format_output_spec(self.output_specification)}

---
*Generated by SubForge PRP Generator*
"""


class IPRPStrategy(ABC):
    """
    Abstract base class for PRP generation strategies
    
    Each strategy encapsulates a specific approach to generating PRPs
    for different phases of the factory pattern execution.
    """
    
    @abstractmethod
    async def generate(self, context: Dict[str, Any]) -> PRP:
        """
        Generate PRP based on strategy
        
        Args:
            context: Dictionary containing all necessary context for PRP generation
                     Must include at minimum:
                     - project_profile: ProjectProfile
                     - context_package: ContextPackage
                     
        Returns:
            Generated PRP instance
        """
        pass
    
    @abstractmethod
    def validate(self, prp: PRP) -> bool:
        """
        Validate generated PRP
        
        Args:
            prp: PRP instance to validate
            
        Returns:
            True if PRP is valid, False otherwise
        """
        pass
    
    @abstractmethod
    def get_required_context_keys(self) -> List[str]:
        """
        Get list of required context keys for this strategy
        
        Returns:
            List of required context dictionary keys
        """
        pass
    
    def validate_context(self, context: Dict[str, Any]) -> bool:
        """
        Validate that context has all required keys
        
        Args:
            context: Context dictionary to validate
            
        Returns:
            True if all required keys present
        """
        required = self.get_required_context_keys()
        return all(key in context for key in required)


class BaseStrategy(IPRPStrategy):
    """
    Base implementation with common functionality for all strategies
    """
    
    def __init__(self, workspace_dir: Path):
        """
        Initialize base strategy
        
        Args:
            workspace_dir: Path to workspace directory
        """
        self.workspace_dir = workspace_dir
        self.prps_dir = workspace_dir / "PRPs"
        self.generated_dir = self.prps_dir / "generated"
        
        # Ensure directories exist
        self.prps_dir.mkdir(parents=True, exist_ok=True)
        self.generated_dir.mkdir(parents=True, exist_ok=True)
    
    def validate(self, prp: PRP) -> bool:
        """
        Basic validation that all required fields are present
        
        Args:
            prp: PRP to validate
            
        Returns:
            True if valid
        """
        return all([
            prp.id,
            prp.type,
            prp.title,
            prp.context_package,
            prp.execution_prompt,
            prp.validation_checklist,
            prp.success_metrics,
            prp.output_specification,
            prp.created_at
        ])
    
    def generate_prp_id(self, prefix: str) -> str:
        """
        Generate unique PRP ID
        
        Args:
            prefix: Prefix for the ID
            
        Returns:
            Unique ID string
        """
        timestamp = int(datetime.now().timestamp())
        return f"{prefix}_{timestamp}"
    
    def save_prp(self, prp: PRP) -> Path:
        """
        Save PRP to file system
        
        Args:
            prp: PRP to save
            
        Returns:
            Path to saved PRP file
        """
        import json
        
        prp_file = self.generated_dir / f"{prp.id}.md"
        
        with open(prp_file, "w", encoding="utf-8") as f:
            f.write(prp.to_markdown())
        
        # Also save metadata as JSON
        meta_file = self.generated_dir / f"{prp.id}_meta.json"
        with open(meta_file, "w", encoding="utf-8") as f:
            json.dump(
                {
                    "id": prp.id,
                    "type": prp.type.value,
                    "title": prp.title,
                    "created_at": prp.created_at.isoformat(),
                    "validation_checklist": prp.validation_checklist,
                    "success_metrics": prp.success_metrics,
                    "output_specification": prp.output_specification,
                },
                f,
                indent=2,
            )
        
        return prp_file